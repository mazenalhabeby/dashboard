{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware, { END } from 'redux-saga';\nimport thunk from 'redux-thunk';\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\nvar sagaMiddleware = createSagaMiddleware();\n\nvar bindMiddleware = function bindMiddleware(middleware) {\n  if (process.env.NODE_ENV !== 'production') {\n    var _require = require('redux-devtools-extension'),\n        composeWithDevTools = _require.composeWithDevTools;\n\n    return composeWithDevTools(applyMiddleware.apply(void 0, _toConsumableArray(middleware)));\n  }\n\n  return applyMiddleware.apply(void 0, _toConsumableArray(middleware));\n};\n\nfunction configureStore() {\n  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var store = createStore(rootReducer, initialState, bindMiddleware([thunk, sagaMiddleware]));\n\n  store.runSaga = function () {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga =\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (store.saga) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            store.dispatch(END);\n            _context.next = 5;\n            return store.saga.done;\n\n          case 5:\n            store.saga = null;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  store.execSagaTasks =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(isServer, tasks) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // run saga\n              store.runSaga(); // dispatch saga tasks\n\n              tasks(store.dispatch); // Stop running and wait for the tasks to be done\n\n              _context2.next = 4;\n              return store.stopSaga();\n\n            case 4:\n              // Re-run on client side\n              if (!isServer) {\n                store.runSaga();\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Initial run\n\n\n  store.runSaga();\n  return store;\n}\n\nexport default configureStore;","map":{"version":3,"sources":["C:/Users/Bill/Desktop/isoadmin-330/isoadmin-330/Isomorphic - React Redux Admin Dashboard/isomorphic/packages/isomorphic-next/redux/store.js"],"names":["createStore","applyMiddleware","createSagaMiddleware","END","thunk","rootReducer","rootSaga","sagaMiddleware","bindMiddleware","middleware","process","env","NODE_ENV","require","composeWithDevTools","configureStore","initialState","store","runSaga","saga","run","stopSaga","dispatch","done","execSagaTasks","isServer","tasks"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,oBAAP,IAA+BC,GAA/B,QAA0C,YAA1C;AAEA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,IAAMC,cAAc,GAAGL,oBAAoB,EAA3C;;AAEA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,UAAU,EAAI;AACnC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAAA,mBACTC,OAAO,CAAC,0BAAD,CADE;AAAA,QACjCC,mBADiC,YACjCA,mBADiC;;AAEzC,WAAOA,mBAAmB,CAACb,eAAe,MAAf,4BAAmBQ,UAAnB,EAAD,CAA1B;AACD;;AACD,SAAOR,eAAe,MAAf,4BAAmBQ,UAAnB,EAAP;AACD,CAND;;AAQA,SAASM,cAAT,GAA2C;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;AACzC,MAAMC,KAAK,GAAGjB,WAAW,CACvBK,WADuB,EAGvBW,YAHuB,EAIvBR,cAAc,CAAC,CAACJ,KAAD,EAAQG,cAAR,CAAD,CAJS,CAAzB;;AAOAU,EAAAA,KAAK,CAACC,OAAN,GAAgB,YAAM;AACpB;AACA,QAAID,KAAK,CAACE,IAAV,EAAgB;AAChBF,IAAAA,KAAK,CAACE,IAAN,GAAaZ,cAAc,CAACa,GAAf,CAAmBd,QAAnB,CAAb;AACD,GAJD;;AAMAW,EAAAA,KAAK,CAACI,QAAN;AAAA;AAAA;AAAA;AAAA,2BAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAEVJ,KAAK,CAACE,IAFI;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAGfF,YAAAA,KAAK,CAACK,QAAN,CAAenB,GAAf;AAHe;AAAA,mBAITc,KAAK,CAACE,IAAN,CAAWI,IAJF;;AAAA;AAKfN,YAAAA,KAAK,CAACE,IAAN,GAAa,IAAb;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAQAF,EAAAA,KAAK,CAACO,aAAN;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAsB,kBAAOC,QAAP,EAAiBC,KAAjB;AAAA;AAAA;AAAA;AAAA;AACpB;AACAT,cAAAA,KAAK,CAACC,OAAN,GAFoB,CAGpB;;AACAQ,cAAAA,KAAK,CAACT,KAAK,CAACK,QAAP,CAAL,CAJoB,CAKpB;;AALoB;AAAA,qBAMdL,KAAK,CAACI,QAAN,EANc;;AAAA;AAOpB;AACA,kBAAI,CAACI,QAAL,EAAe;AACbR,gBAAAA,KAAK,CAACC,OAAN;AACD;;AAVmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA,MAtByC,CAmCzC;;;AACAD,EAAAA,KAAK,CAACC,OAAN;AAEA,SAAOD,KAAP;AACD;;AAED,eAAeF,cAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware, { END } from 'redux-saga';\n\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst bindMiddleware = middleware => {\n  if (process.env.NODE_ENV !== 'production') {\n    const { composeWithDevTools } = require('redux-devtools-extension');\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n  return applyMiddleware(...middleware);\n};\n\nfunction configureStore(initialState = {}) {\n  const store = createStore(\n    rootReducer,\n\n    initialState,\n    bindMiddleware([thunk, sagaMiddleware])\n  );\n\n  store.runSaga = () => {\n    // Avoid running twice\n    if (store.saga) return;\n    store.saga = sagaMiddleware.run(rootSaga);\n  };\n\n  store.stopSaga = async () => {\n    // Avoid running twice\n    if (!store.saga) return;\n    store.dispatch(END);\n    await store.saga.done;\n    store.saga = null;\n  };\n\n  store.execSagaTasks = async (isServer, tasks) => {\n    // run saga\n    store.runSaga();\n    // dispatch saga tasks\n    tasks(store.dispatch);\n    // Stop running and wait for the tasks to be done\n    await store.stopSaga();\n    // Re-run on client side\n    if (!isServer) {\n      store.runSaga();\n    }\n  };\n\n  // Initial run\n  store.runSaga();\n\n  return store;\n}\n\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}